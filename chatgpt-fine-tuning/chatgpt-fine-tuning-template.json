{
    "components": [
        {
            "type": "group",
            "id": "warning",
            "index": 0,
            "deletable": true,
            "isTemplate": true,
            "components": [
                {
                    "type": "paragraph",
                    "id": "warning_text",
                    "label": "",
                    "value": "⚠️⚠️⚠️ Warning: Update the OpenAI API Key to get the full functionality\n\n Perform the following steps. \n \n   1. Click \"Edit your form\" on the top left \n   2. Click \"Next\" on Top Right \n   3. Click on \"Variables\" tab on Top Left \n   4. Insert OpenAI API key in \"Value\" section \n   5. Click \"Run\" then \"See in editor\" on top left ",
                    "exclude": true,
                    "invalid": false
                }
            ],
            "invalid": false
        },
        {
            "type": "grid",
            "id": "main_container",
            "columns": [
                {
                    "span": 12,
                    "type": "column",
                    "id": "r_ivvhwv",
                    "components": [
                        {
                            "type": "textarea",
                            "id": "context",
                            "label": "System Contextual Reference",
                            "placeholder": "",
                            "isRequired": false,
                            "showError": false,
                            "value": "You are the SuperAnnotate bot. Answer as concisely as possible.",
                            "min": 0,
                            "max": 512,
                            "hidden": false,
                            "exclude": false,
                            "invalid": false
                        },
                        {
                            "type": "tabs",
                            "id": "main_tab",
                            "tabs": [
                                {
                                    "name": "Q & A",
                                    "type": "tab",
                                    "id": "r_p7fsi8",
                                    "components": [
                                        {
                                            "type": "grid",
                                            "id": "r_kvd1d0",
                                            "columns": [
                                                {
                                                    "span": 4,
                                                    "type": "column",
                                                    "id": "r_05a421",
                                                    "components": [
                                                        {
                                                            "type": "textarea",
                                                            "id": "prompt",
                                                            "label": "Question",
                                                            "placeholder": "write your prompt ...",
                                                            "isRequired": false,
                                                            "showError": false,
                                                            "value": "",
                                                            "min": 0,
                                                            "max": 512,
                                                            "hidden": false,
                                                            "exclude": false,
                                                            "invalid": false
                                                        },
                                                        {
                                                            "type": "grid",
                                                            "id": "r_jptlmi",
                                                            "columns": [
                                                                {
                                                                    "span": 16,
                                                                    "type": "column",
                                                                    "id": "r_qr7g9v",
                                                                    "components": [
                                                                        {
                                                                            "type": "webComponent",
                                                                            "id": "model_select_custom",
                                                                            "source": "code",
                                                                            "value": "<!-- Version 1.00 -->\n<style>\n    .custom-select {\n        font-family: Euclid Circular A,sans-serif;\n        text-align: center;\n        height: 40px;\n    }\n\n    select {\n        width: 100%;\n        height: 100%;\n        padding: 4px;\n        background-color: #fff;\n        border: 1px solid #caced1;\n        border-radius: 0.25rem;\n        cursor: pointer;\n        display: none;\n    }\n\n    .loader {\n        width: 40px;\n        height: 40px;\n        border: 5px solid #dedede;\n        border-bottom-color: transparent;\n        border-radius: 50%;\n        display: inline-block;\n        box-sizing: border-box;\n        animation: rotation 1s linear infinite;\n    }\n\n    @keyframes rotation {\n        0% {\n            transform: rotate(0deg);\n        }\n\n        100% {\n            transform: rotate(360deg);\n        }\n    }\n</style>\n<div class=\"custom-select\">\n    <span id=\"sa-spinner\" class=\"loader\"></span>\n    <select id=\"sa-custom-select\" onchange=\"onSelect(this)\"></select>\n</div>\n<script>\n    // Listen for messages from the main form\n    window.addEventListener('message', e => {\n        commandHandler(e.data.data);\n    });\n\n    function commandHandler(data) {\n        const options = JSON.parse(data);\n        removeAllOptions();\n        populateOptions(options);\n    }\n\n    function populateOptions(options) {\n        const selectEl = document.getElementById(\"sa-custom-select\");\n        const spinnerEl = document.getElementById(\"sa-spinner\");\n        options.forEach(option => {\n            const newOptionEl = document.createElement(\"option\");\n            newOptionEl.text = option.label;\n            newOptionEl.value = option.value;\n            selectEl.add(newOptionEl);\n        });\n        selectEl.style.setProperty(\"display\", \"inline-block\");\n        spinnerEl.style.setProperty(\"display\", \"none\");\n    }\n\n    function removeAllOptions() {\n        const selectEl = document.getElementById(\"sa-custom-select\");\n        let i, L = selectEl.options.length - 1;\n        for (i = L; i >= 0; i--) {\n            selectEl.remove(i);\n        }\n    }\n\n    function onSelect(e) {\n        window.parent.postMessage({ action: 'topy', data: e.value });\n    }\n</script>",
                                                                            "height": 56,
                                                                            "exclude": true,
                                                                            "invalid": false
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "span": 12,
                                                                    "type": "column",
                                                                    "id": "r_fb75ve",
                                                                    "components": [
                                                                        {
                                                                            "type": "buttonSecondary",
                                                                            "id": "generate",
                                                                            "text": "Generate",
                                                                            "invalid": false
                                                                        }
                                                                    ]
                                                                }
                                                            ],
                                                            "spanSum": 28,
                                                            "isResizable": false
                                                        },
                                                        {
                                                            "type": "rating",
                                                            "id": "rating",
                                                            "label": "Rate the answer",
                                                            "value": null,
                                                            "numberOfStars": 5,
                                                            "exclude": false,
                                                            "invalid": false
                                                        }
                                                    ]
                                                },
                                                {
                                                    "span": 8,
                                                    "type": "column",
                                                    "id": "r_75ztu7",
                                                    "components": [
                                                        {
                                                            "type": "tabs",
                                                            "id": "comp_tab",
                                                            "tabs": [
                                                                {
                                                                    "name": "Answer",
                                                                    "type": "tab",
                                                                    "id": "r_3mugp7",
                                                                    "components": [
                                                                        {
                                                                            "type": "webComponent",
                                                                            "id": "comp_preview",
                                                                            "source": "code",
                                                                            "value": "<!-- Version 1.00 -->\n<div id=\"sa-main-container\"></div>\n<script type=\"text/javascript\" src=\"https://rawgit.com/showdownjs/showdown/develop/dist/showdown.min.js\"></script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/foundation/5.5.2/css/foundation.min.css\">\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css\">\n<style>\n    html,\n    body {\n        font-family: Euclid Circular A,sans-serif;\n        width: 100%;\n        height: 100%;\n        margin: 0;\n        padding: 8px;\n    }\n\n    html {\n        overflow-x: hidden;\n    }\n\n    @keyframes squeezeBody {\n        from {\n            width: 100%;\n        }\n\n        to {\n            width: calc(100% - 300px);\n        }\n    }\n\n    @-webkit-keyframes squeezeBody {\n        from {\n            width: 100%;\n        }\n\n        to {\n            width: calc(100% - 300px);\n        }\n    }\n\n    @keyframes stretchBody {\n        from {\n            width: calc(100% - 300px);\n        }\n\n        to {\n            width: 100%;\n        }\n    }\n\n    @-webkit-keyframes stretchBody {\n        from {\n            width: calc(100% - 300px);\n        }\n\n        to {\n            width: 100%;\n        }\n    }\n\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6 {\n        font-family: 'Old Standard TT', serif;\n        font-weight: bold;\n    }\n\n    h3 {\n        border-bottom: 1px solid #ddd;\n    }\n\n    .serif {\n        font-family: 'Old Standard TT', serif;\n    }\n\n    .top-bar {\n        height: 45px;\n        min-height: 45px;\n        position: absolute;\n        top: 0;\n        right: 0;\n        left: 0;\n    }\n\n    .bars-lnk {\n        color: #fff;\n    }\n\n    .bars-lnk i {\n        display: inline-block;\n        margin-left: 10px;\n        margin-top: 7px;\n    }\n\n    .bars-lnk img {\n        display: inline-block;\n        margin-left: 10px;\n        margin-top: -15px;\n        margin-right: 15px;\n        height: 35px;\n    }\n\n    .lateral-menu {\n        background-color: #333;\n        color: rgb(144, 144, 144);\n        width: 300px;\n        font-family: 'Open Sans', 'Myriad Pro', 'Lucida Grande', 'Lucida Sans Unicode', 'Lucida Sans', Geneva, Verdana, sans-serif;\n    }\n\n    .lateral-menu label {\n        color: rgb(144, 144, 144);\n    }\n\n    .lateral-menu-content {\n        padding-left: 10px;\n        height: 100%;\n        font-size: 12px;\n        font-style: normal;\n        font-variant: normal;\n        font-weight: bold;\n        line-height: 16px;\n    }\n\n    .lateral-menu-content .title {\n        padding-top: 15px;\n        font-size: 2em;\n        height: 45px;\n    }\n\n    .lateral-menu-content-inner {\n        overflow-y: auto;\n        height: 100%;\n        padding-top: 10px;\n        padding-bottom: 50px;\n        padding-right: 10px;\n        font-size: 0.9em;\n    }\n\n\n\n    .container {\n        display: flex;\n        flex-direction: row;\n        flex-wrap: nowrap;\n        justify-content: center;\n        align-items: stretch;\n        width: 100%;\n        height: 100%;\n        padding-top: 65px;\n    }\n\n    .container>* {\n        display: block;\n        width: 50%;\n        margin-left: 10px;\n        margin-right: 10px;\n        max-height: 100%;\n    }\n\n    .container textarea {\n        resize: none;\n        font-family: Consolas, \"Liberation Mono\", Courier, monospace;\n        height: 97%;\n        max-height: 97%;\n        width: 45%;\n    }\n\n    #preview {\n        height: 97%;\n        max-height: 97%;\n        border: 1px solid #eee;\n        overflow-y: scroll;\n        width: 55%;\n        padding: 10px;\n    }\n\n    pre {\n        white-space: pre-wrap;\n        /* css-3 */\n        white-space: -moz-pre-wrap;\n        /* Mozilla, since 1999 */\n        white-space: -pre-wrap;\n        /* Opera 4-6 */\n        white-space: -o-pre-wrap;\n        /* Opera 7 */\n        word-wrap: break-word;\n        /* Internet Explorer 5.5+ */\n        background-color: #f8f8f8;\n        border: 1px solid #dfdfdf;\n        margin-top: 1.5em;\n        margin-bottom: 1.5em;\n        padding: 0.125rem 0.3125rem 0.0625rem;\n    }\n\n    pre code {\n        background-color: transparent;\n        border: 0;\n        padding: 0;\n    }\n\n\n    .modal-wrapper {\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        top: 0;\n        left: 0;\n        z-index: 999;\n        background-color: rgba(51, 51, 51, 0.5);\n    }\n\n    .modal-inner {\n        margin-top: 200px;\n        margin-left: auto;\n        margin-right: auto;\n        width: 600px;\n        height: 225px;\n        background-color: #fff;\n        opacity: 1;\n        z-index: 1000;\n    }\n\n    .modal-close-btn {\n        float: right;\n        display: inline-block;\n        margin-right: 5px;\n        color: #ff4336;\n    }\n\n    .modal-close-btn:hover {\n        float: right;\n        display: inline-block;\n        margin-right: 5px;\n        color: #8d0002;\n    }\n\n    .modal-topbar {\n        clear: both;\n        height: 25px;\n    }\n\n    .modal-inner .link-area {\n        margin: 10px;\n        height: 170px;\n\n    }\n\n    .modal-inner textarea {\n        width: 100%;\n        height: 100%;\n        margin: 0;\n        padding: 0;\n    }\n\n    .version {\n        color: white;\n        font-size: 0.8em !important;\n    }\n</style>\n<script>\n    const outEl = document.getElementById(\"sa-main-container\");\n    const converter = new showdown.Converter({ tables: true, ghCodeBlocks: true });\n    let completion = \"\";\n\n    // Listen for messages from the main form\n    window.addEventListener('message', async e => {\n        try {\n            await commandHandler(e.data.data);\n        } catch (error) {\n            console.log(\">>> >>> >>> SuperAnnotate Error! >>> >>> >>>\", error.message);\n            window.parent.postMessage({ action: 'topy', data: { error: error.message } });\n        }\n    });\n\n    async function commandHandler(data) {\n        const parsedData = JSON.parse(data);\n        const { command } = parsedData;\n        switch (command) {\n            // Generate completions\n            case \"generate\":\n                completion = \"\";\n                outEl.innerHTML = converter.makeHtml(completion);\n                await generate(parsedData);\n                break;\n            // Get the latest completion\n            case \"get_completion\":\n                window.parent.postMessage({ action: 'topy', data: { data: completion } });\n                break;\n            // Receive the completion\n            case \"input\":\n                completion = parsedData.completion;\n                outEl.innerHTML = converter.makeHtml(completion);\n                break;\n            // Clear the UI\n            case \"clear\":\n                completion = \"\";\n                outEl.innerHTML = converter.makeHtml(completion);\n                break;\n            default:\n                window.parent.postMessage({ action: 'topy', data: { error: \"Wrong command.\" } });\n                break;\n        }\n    }\n\n    async function generate(data) {\n        const { url, api_key, model, prompt, context, stream_up } = data;\n        const requestBody = {\n            \"model\": model,\n            \"messages\": [{ \"role\": \"user\", \"content\": prompt }],\n            \"stream\": true\n        };\n        if (context) {\n            requestBody.messages.unshift({\"role\": \"system\", \"content\": context})\n        }\n        const response = await openAICompletion(url, api_key, requestBody);\n        const reader = response.getReader();\n\n        // Start reading from the stream\n        for (let index = 0; index < 1000000; index++) {\n            const { value, done } = await reader.read();\n\n            // Streaming will stop on `done` event or after 1m iterations (for loop)\n            if (done) break;\n\n            // `value` is a `Uint8Array`. Convert it to string.\n            const textChunk = new TextDecoder().decode(value);\n            // Retreave server send event rows\n            textChunk.split(\"data: \").forEach(line => {\n                const trimmed = line.trim();\n                // Get start of the object\n                if (trimmed.indexOf(\"{\") === 0) {\n                    const dataObj = JSON.parse(trimmed);\n                    const token = dataObj.choices[0].delta.content\n                    if (token !== undefined) {\n                        completion += token;\n                        outEl.innerHTML = converter.makeHtml(completion);\n                        // Send back to the main form\n                        if (stream_up) {\n                            window.parent.postMessage({ action: 'topy', data: { data: completion } });\n                        }\n                    }\n                }\n            })\n        }\n    }\n\n    async function openAICompletion(url, api_key, data) {\n        const headers = { \"Content-Type\": \"application/json\" };\n        if (api_key) {\n            headers.Authorization = `Bearer  ${api_key}`;\n        }\n\n        return fetch(url, {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n        })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`POST ${url} responded with ${response.status} status code.`);\n                } else {\n                    return response.body;\n                }\n            })\n            .catch(error => {\n                throw error;\n            });\n    }\n</script>",
                                                                            "height": 300,
                                                                            "exclude": true,
                                                                            "invalid": false
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "name": "Edit",
                                                                    "type": "tab",
                                                                    "id": "r_r0iau7",
                                                                    "components": [
                                                                        {
                                                                            "type": "code",
                                                                            "id": "comp_code",
                                                                            "label": "",
                                                                            "isRequired": false,
                                                                            "showError": false,
                                                                            "value": "",
                                                                            "exclude": false,
                                                                            "invalid": false
                                                                        }
                                                                    ]
                                                                }
                                                            ],
                                                            "invalid": false
                                                        }
                                                    ]
                                                }
                                            ],
                                            "spanSum": 12,
                                            "isResizable": false
                                        },
                                        {
                                            "type": "button",
                                            "id": "add",
                                            "text": "Complete",
                                            "invalid": false
                                        }
                                    ]
                                },
                                {
                                    "name": "Completed Answers",
                                    "type": "tab",
                                    "id": "r_d00wva",
                                    "components": [
                                        {
                                            "type": "grid",
                                            "id": "r_ow6xb2",
                                            "columns": [
                                                {
                                                    "span": 12,
                                                    "type": "column",
                                                    "id": "r_tn8sso",
                                                    "components": [
                                                        {
                                                            "type": "webComponent",
                                                            "id": "import_collection",
                                                            "source": "code",
                                                            "value": "<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.4.1/papaparse.min.js\"></script>\n<style>\n    .button {\n        font-family: Euclid Circular A,sans-serif;\n        background-color: #184afb;\n        border: none;\n        color: white;\n        padding-left: 32px;\n        padding-right: 32px;\n        text-align: center;\n        text-decoration: none;\n        display: inline-block;\n        font-size: 16px;\n        cursor: pointer;\n        border-radius: 6px;\n        height: 40px;\n    }\n    .button:hover {\n        background-color: #0b2fd4;\n    }\n\n    .button:active {\n        background-color: #001aad;\n    }\n\n    #my_file {\n        display: none;\n    }\n</style>\n<button id=\"sa-import-collection\" class=\"button\" onclick=\"importCollection()\">Import CSV</button>\n<input type=\"file\" id=\"my_file\" accept=\".csv\">\n<script>\n    const fileEl = document.getElementById(\"my_file\");\n    fileEl.addEventListener('change', function(e) {\n        if (e.target.files[0]) {\n            const file = e.target.files[0];\n            if (file) {\n                const reader = new FileReader();\n                reader.readAsText(file, \"UTF-8\");\n                reader.onload = function (evt) {\n                    var data = Papa.parse(evt.target.result);\n                    window.parent.postMessage({ action: 'topy', data: JSON.stringify(data.data) });\n                }\n                reader.onerror = function (evt) {\n                    document.getElementById(\"fileContents\").innerHTML = \"error reading file\";\n                }\n            }\n        }\n    });\n    \n    function importCollection() {\n        fileEl.click();\n    }\n\n</script>",
                                                            "height": 56,
                                                            "exclude": true,
                                                            "invalid": false
                                                        }
                                                    ]
                                                },
                                                {
                                                    "span": 10,
                                                    "type": "column",
                                                    "id": "r_ujyits",
                                                    "components": [
                                                        {
                                                            "type": "button",
                                                            "id": "clear_collection",
                                                            "text": "Clear  ❌",
                                                            "invalid": false
                                                        }
                                                    ]
                                                },
                                                {
                                                    "span": 10,
                                                    "id": "r_i037n7",
                                                    "components": [
                                                        {
                                                            "type": "paragraph",
                                                            "id": "collection_length",
                                                            "label": "# of Answers",
                                                            "value": "",
                                                            "exclude": false,
                                                            "invalid": false
                                                        }
                                                    ]
                                                },
                                                {
                                                    "span": 12,
                                                    "id": "r_z4jxic",
                                                    "components": []
                                                }
                                            ],
                                            "spanSum": 32,
                                            "isResizable": false
                                        },
                                        {
                                            "type": "grid",
                                            "id": "col_lable_title",
                                            "columns": [
                                                {
                                                    "span": 6,
                                                    "id": "r_9kr7yl",
                                                    "components": []
                                                },
                                                {
                                                    "span": 12,
                                                    "type": "column",
                                                    "id": "r_0lbpbf",
                                                    "components": [
                                                        {
                                                            "type": "paragraph",
                                                            "id": "title1",
                                                            "label": "",
                                                            "value": "Question",
                                                            "exclude": true,
                                                            "invalid": false
                                                        }
                                                    ]
                                                },
                                                {
                                                    "span": 12,
                                                    "type": "column",
                                                    "id": "r_ju0ge1",
                                                    "components": [
                                                        {
                                                            "type": "paragraph",
                                                            "id": "title2",
                                                            "label": "",
                                                            "value": "Answer",
                                                            "exclude": true,
                                                            "invalid": false
                                                        }
                                                    ]
                                                },
                                                {
                                                    "span": 8,
                                                    "id": "r_e9j9uk",
                                                    "components": [
                                                        {
                                                            "type": "paragraph",
                                                            "id": "title3",
                                                            "label": "",
                                                            "value": "Rating",
                                                            "exclude": true,
                                                            "invalid": false
                                                        }
                                                    ]
                                                }
                                            ],
                                            "spanSum": 38,
                                            "isResizable": false,
                                            "invalid": false
                                        },
                                        {
                                            "type": "group",
                                            "id": "table_collection",
                                            "index": 0,
                                            "deletable": true,
                                            "isTemplate": true,
                                            "components": [
                                                {
                                                    "type": "grid",
                                                    "id": "r_iueer1",
                                                    "columns": [
                                                        {
                                                            "span": 4,
                                                            "id": "r_rvlgf4",
                                                            "components": [
                                                                {
                                                                    "type": "paragraph",
                                                                    "id": "row_index",
                                                                    "label": "",
                                                                    "value": "",
                                                                    "exclude": true,
                                                                    "invalid": false
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "span": 12,
                                                            "type": "column",
                                                            "id": "r_4ydrn9",
                                                            "components": [
                                                                {
                                                                    "type": "textarea",
                                                                    "id": "row_prompt",
                                                                    "label": "",
                                                                    "placeholder": "",
                                                                    "isRequired": false,
                                                                    "showError": false,
                                                                    "value": "",
                                                                    "min": 0,
                                                                    "max": 512,
                                                                    "hidden": false,
                                                                    "exclude": false,
                                                                    "invalid": false
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "span": 12,
                                                            "type": "column",
                                                            "id": "r_jp57wc",
                                                            "components": [
                                                                {
                                                                    "type": "textarea",
                                                                    "id": "row_comp",
                                                                    "label": "",
                                                                    "placeholder": "",
                                                                    "isRequired": false,
                                                                    "showError": false,
                                                                    "value": "",
                                                                    "min": 0,
                                                                    "max": 512000,
                                                                    "hidden": false,
                                                                    "exclude": false,
                                                                    "invalid": false
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "span": 8,
                                                            "id": "r_d386lx",
                                                            "components": [
                                                                {
                                                                    "type": "rating",
                                                                    "id": "row_rating",
                                                                    "label": "",
                                                                    "value": null,
                                                                    "numberOfStars": 5,
                                                                    "exclude": false,
                                                                    "invalid": false
                                                                }
                                                            ]
                                                        }
                                                    ],
                                                    "spanSum": 36,
                                                    "isResizable": false,
                                                    "invalid": false
                                                }
                                            ],
                                            "invalid": false
                                        }
                                    ]
                                },
                                {
                                    "name": "Datasets & Models",
                                    "id": "r_ga39bm",
                                    "components": [
                                        {
                                            "type": "tabs",
                                            "id": "r_hhu9nw",
                                            "tabs": [
                                                {
                                                    "name": "Uploaded Datasets",
                                                    "id": "r_uwy3x2",
                                                    "components": [
                                                        {
                                                            "type": "grid",
                                                            "id": "r_p48kc1",
                                                            "columns": [
                                                                {
                                                                    "span": 12,
                                                                    "id": "r_tr4ieu",
                                                                    "components": [
                                                                        {
                                                                            "type": "input",
                                                                            "id": "file_name",
                                                                            "label": "",
                                                                            "placeholder": "file name ...",
                                                                            "isRequired": false,
                                                                            "showError": false,
                                                                            "value": "",
                                                                            "min": 0,
                                                                            "max": 18,
                                                                            "hidden": false,
                                                                            "exclude": false,
                                                                            "invalid": false
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "span": 12,
                                                                    "id": "r_qq1rja",
                                                                    "components": [
                                                                        {
                                                                            "type": "button",
                                                                            "id": "upload_button",
                                                                            "text": "Upload CSV ⬆",
                                                                            "invalid": false
                                                                        }
                                                                    ]
                                                                }
                                                            ],
                                                            "spanSum": 24,
                                                            "isResizable": false
                                                        },
                                                        {
                                                            "type": "group",
                                                            "id": "files_row",
                                                            "index": 0,
                                                            "deletable": true,
                                                            "isTemplate": true,
                                                            "components": [
                                                                {
                                                                    "type": "grid",
                                                                    "id": "r_otrmnz",
                                                                    "columns": [
                                                                        {
                                                                            "span": 4,
                                                                            "id": "r_i2i4tp",
                                                                            "components": [
                                                                                {
                                                                                    "type": "paragraph",
                                                                                    "id": "file_index_row",
                                                                                    "label": "",
                                                                                    "value": "",
                                                                                    "exclude": false,
                                                                                    "invalid": false
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "span": 12,
                                                                            "id": "r_01w0fp",
                                                                            "components": [
                                                                                {
                                                                                    "type": "paragraph",
                                                                                    "id": "file_name_row",
                                                                                    "label": "",
                                                                                    "value": "",
                                                                                    "exclude": false,
                                                                                    "invalid": false
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "span": 12,
                                                                            "id": "r_l2a7qy",
                                                                            "components": [
                                                                                {
                                                                                    "type": "paragraph",
                                                                                    "id": "file_id_row",
                                                                                    "label": "",
                                                                                    "value": "",
                                                                                    "exclude": false,
                                                                                    "invalid": false
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "span": 12,
                                                                            "id": "r_iiokfs",
                                                                            "components": [
                                                                                {
                                                                                    "type": "button",
                                                                                    "id": "use_file",
                                                                                    "text": "Use for Fine-Tuning",
                                                                                    "invalid": false
                                                                                }
                                                                            ]
                                                                        }
                                                                    ],
                                                                    "spanSum": 28,
                                                                    "isResizable": false
                                                                }
                                                            ],
                                                            "invalid": false
                                                        }
                                                    ]
                                                },
                                                {
                                                    "name": "Models",
                                                    "id": "r_abmcvw",
                                                    "components": [
                                                        {
                                                            "type": "grid",
                                                            "id": "r_kpcyr1",
                                                            "columns": [
                                                                {
                                                                    "span": 12,
                                                                    "id": "r_e83tzs",
                                                                    "components": [
                                                                        {
                                                                            "type": "select",
                                                                            "id": "base_model",
                                                                            "label": "Base Model",
                                                                            "placeholder": "",
                                                                            "isRequired": false,
                                                                            "showError": false,
                                                                            "isMultiselect": false,
                                                                            "value": "gpt-3.5-turbo-0613",
                                                                            "options": [
                                                                                {
                                                                                    "value": "gpt-3.5-turbo-0613",
                                                                                    "checked": true
                                                                                }
                                                                            ],
                                                                            "exclude": false,
                                                                            "invalid": false
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "span": 12,
                                                                    "id": "r_2895m5",
                                                                    "components": [
                                                                        {
                                                                            "type": "paragraph",
                                                                            "id": "training_file_name",
                                                                            "label": "File Name",
                                                                            "value": "",
                                                                            "exclude": false,
                                                                            "invalid": false
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "span": 12,
                                                                    "id": "r_6axnvj",
                                                                    "components": [
                                                                        {
                                                                            "type": "paragraph",
                                                                            "id": "training_file_id",
                                                                            "label": "File ID",
                                                                            "value": "",
                                                                            "exclude": false,
                                                                            "invalid": false
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "span": 12,
                                                                    "id": "r_owk41r",
                                                                    "components": [
                                                                        {
                                                                            "type": "input",
                                                                            "id": "model_suffix",
                                                                            "label": "Model Suffix",
                                                                            "placeholder": "write model suffix ...",
                                                                            "isRequired": false,
                                                                            "showError": false,
                                                                            "value": "",
                                                                            "min": 1,
                                                                            "max": 18,
                                                                            "hidden": false,
                                                                            "exclude": false,
                                                                            "invalid": false
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "span": 12,
                                                                    "id": "r_7p1uc2",
                                                                    "components": []
                                                                }
                                                            ],
                                                            "spanSum": 60,
                                                            "isResizable": false
                                                        },
                                                        {
                                                            "type": "button",
                                                            "id": "start_training",
                                                            "text": "Start Fine-tuning",
                                                            "invalid": false
                                                        },
                                                        {
                                                            "type": "group",
                                                            "id": "job_events",
                                                            "index": 0,
                                                            "deletable": false,
                                                            "isTemplate": true,
                                                            "components": [
                                                                {
                                                                    "type": "grid",
                                                                    "id": "r_omcxih",
                                                                    "columns": [
                                                                        {
                                                                            "span": 12,
                                                                            "id": "r_zkyxsn",
                                                                            "components": [
                                                                                {
                                                                                    "type": "paragraph",
                                                                                    "id": "running_job_id",
                                                                                    "label": "Running Job ID",
                                                                                    "value": "",
                                                                                    "exclude": false,
                                                                                    "invalid": false
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "span": 12,
                                                                            "id": "r_f4kczt",
                                                                            "components": [
                                                                                {
                                                                                    "type": "paragraph",
                                                                                    "id": "running_job_model",
                                                                                    "label": "Model",
                                                                                    "value": "",
                                                                                    "exclude": false,
                                                                                    "invalid": false
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "span": 12,
                                                                            "id": "r_bwti5o",
                                                                            "components": [
                                                                                {
                                                                                    "type": "paragraph",
                                                                                    "id": "running_job_status",
                                                                                    "label": "Running Job Status",
                                                                                    "value": "",
                                                                                    "exclude": false,
                                                                                    "invalid": false
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "span": 12,
                                                                            "id": "r_wijah8",
                                                                            "components": [
                                                                                {
                                                                                    "type": "button",
                                                                                    "id": "running_job_refresh",
                                                                                    "text": "⟳",
                                                                                    "invalid": false
                                                                                }
                                                                            ]
                                                                        }
                                                                    ],
                                                                    "spanSum": 24,
                                                                    "isResizable": false
                                                                }
                                                            ],
                                                            "invalid": false
                                                        }
                                                    ]
                                                }
                                            ],
                                            "invalid": false
                                        },
                                        {
                                            "type": "webComponent",
                                            "id": "fine_tuning_web",
                                            "source": "code",
                                            "value": "<script>\n    let openAI;\n\n    // Listen for messages from the main form\n    window.addEventListener('message', async e => {\n        try {\n            await commandHandler(e.data.data);\n        } catch (error) {\n            console.log(\">>> >>> >>> SuperAnnotate Error! >>> >>> >>>\", error.message);\n            window.parent.postMessage({ action: 'topy', data: JSON.stringify({ error: error.message }) });\n        }\n    });\n\n    /// Command handler\n    async function commandHandler(data) {\n        const parsedData = JSON.parse(data);\n        const { command } = parsedData;\n        const response = { command };\n\n        switch (command) {\n            case \"init\":\n                const { api_key, system_description } = parsedData;\n                openAI = new OpenAI(api_key, system_description);\n                break;\n            case \"list_models\":\n                console.log(\">>> >>> >>> list_models\");\n                const models = await openAI.listModels();\n                response.data = models;\n                window.parent.postMessage({ action: 'topy', data: JSON.stringify(response) });\n                break;\n            case \"list_fine_tuning_jobs\":\n                console.log(\">>> >>> >>> list_fine_tuning_jobs\");\n                const jobs = await openAI.listFineTuningJobs()\n                response.data = jobs;\n                window.parent.postMessage({ action: 'topy', data: JSON.stringify(response) });\n                break;\n            case \"list_files\":\n                console.log(\">>> >>> >>> list_files\");\n                const files = await openAI.listFiles()\n                response.data = files;\n                window.parent.postMessage({ action: 'topy', data: JSON.stringify(response) });\n                break;\n            case \"delete_file\":\n                console.log(\">>> >>> >>> delete_file\");\n                const { file_id } = parsedData;\n                const del = await openAI.deleteFile(file_id)\n                response.data = del;\n                window.parent.postMessage({ action: 'topy', data: JSON.stringify(response) });\n                break;\n            case \"upload_file\":\n                console.log(\">>> >>> >>> upload_file\");\n                const { file_name, dataset, context } = parsedData;\n                const uploadFile = await openAI.uploadFile(file_name, dataset, context)\n                response.data = uploadFile;\n                window.parent.postMessage({ action: 'topy', data: JSON.stringify(response) });\n                break;\n            case \"create_fine_tuning_job\":\n                console.log(\">>> >>> >>> create_fine_tuning_job\");\n                const { base_model, suffix } = parsedData;\n                const fileId = parsedData.file_id;\n                const createJob = await openAI.createFineTuningJob(base_model, fileId, suffix)\n                response.data = createJob;\n                window.parent.postMessage({ action: 'topy', data: JSON.stringify(response) });\n                break;\n            default:\n                response.error = \"Error: no command specified!\";\n                window.parent.postMessage({ action: 'topy', data: JSON.stringify(response) });\n                break;\n        }\n    }\n\n    class OpenAI {\n        constructor(apiKey, systemDescription) {\n            if (apiKey) {\n                this.apiKey = apiKey;\n            }\n\n            this.systemDescription = (systemDescription) ? systemDescription : \"Super is a factual chatbot\";\n        }\n\n\n        /// File related functions\n        listFiles = async () => {\n            const headers = [{ \"Content-Type\": \"application/json\" }];\n            return this.request(\"GET\", \"/files\", headers);\n        }\n        uploadFile = (fileName, dataset, context) => {\n            const formdata = new FormData();\n            formdata.append(\"purpose\", \"fine-tune\");\n\n            const file = new File([this.toJsonlStr(dataset, context)], fileName, {\n                type: \"text/json\",\n            });\n\n            formdata.append(\"file\", file);\n            return this.request(\"POST\", \"/files\", null, null, formdata);\n        }\n        deleteFile = async (fileId) => {\n            const headers = [{ \"Content-Type\": \"application/json\" }];\n            return this.request(\"DELETE\", `/files/${fileId}`, headers);\n        }\n\n\n        /// Fune-tuning related functions\n        createFineTuningJob = (baseModel, fileId, suffix) => {\n            const body = {\n                model: baseModel,\n                training_file: fileId,\n                suffix\n            };\n\n            const headers = [{ \"Content-Type\": \"application/json\" }];\n            return this.request(\"POST\", \"/fine_tuning/jobs\", headers, null, JSON.stringify(body));\n        }\n        listFineTuningJobs = async (after, limit) => {\n            let query = null;\n            if (after) {\n                query = { after };\n            }\n            if (limit) {\n                if (!query) {\n                    query = {};\n                }\n                query.limit = limit;\n            }\n\n            const headers = [{ \"Content-Type\": \"application/json\" }];\n            return this.request(\"GET\", \"/fine_tuning/jobs\", headers, query);\n        }\n        getFineTuningEvents = async (jobId) => {\n            const headers = [{ \"Content-Type\": \"application/json\" }];\n            return this.request(\"GET\", `/jobs/${jobId}/events`, headers);\n        }\n\n\n        /// Model related functions\n        listModels = async () => {\n            const headers = [{ \"Content-Type\": \"application/json\" }];\n            return this.request(\"GET\", \"/models\", headers);\n        }\n\n\n        /// Helper functions\n        request = (method, path, headers, params, body) => {\n            let url = \"https://api.openai.com/v1\" + path\n            const myHeaders = new Headers();\n            if(this.apiKey) {\n                myHeaders.append(\"Authorization\", `Bearer ${this.apiKey}`);\n            }\n            if (headers && headers.length) {\n                headers.forEach(header => {\n                    const key = Object.keys(header)[0]\n                    myHeaders.append(Object.keys(header)[0], header[key]);\n                });\n            }\n            let requestOptions;\n\n            switch (method.toLowerCase()) {\n                case \"get\":\n                case \"delete\":\n                    requestOptions = {\n                        method,\n                        headers: myHeaders,\n                    }\n                    if (params) {\n                        url = url + jsonToQueryString(params);\n                    }\n                    break;\n                case \"post\":\n                    requestOptions = {\n                        method,\n                        headers: myHeaders,\n                    };\n                    if (body) {\n                        requestOptions.body = body;\n                    }\n                    break;\n                default:\n                    break;\n            }\n            return fetch(url, requestOptions)\n                .then(response => {\n                    if (!response.ok) {\n                        throw new Error(`POST ${url} responded with ${response.status} status code.`);\n                    } else {\n                        return response.json();\n                    }\n                })\n                .then(result => result)\n                .catch(error => {\n                    throw error\n                });\n        }\n        jsonToQueryString = (json) => {\n            return '?' +\n                Object.keys(json).map(function (key) {\n                    return encodeURIComponent(key) + '=' +\n                        encodeURIComponent(json[key]);\n                }).join('&');\n        }\n        toJsonlStr = (data, context) => {\n            let dataStr = \"\";\n            data.forEach(row => {\n                const newRow = {\n                    messages: [\n                        { role: \"system\", content: context ? context : this.systemDescription },\n                        { role: \"user\", content: row.prompt },\n                        { role: \"assistant\", content: row.completion },\n                    ]\n                }\n                dataStr += (JSON.stringify(newRow) + \"\\n\");\n            });\n            return dataStr;\n        }\n    }\n</script>",
                                            "height": 400,
                                            "exclude": true,
                                            "invalid": false
                                        }
                                    ]
                                },
                                {
                                    "type": "tab",
                                    "id": "r_vxgp03",
                                    "name": "Compare Models",
                                    "components": [
                                        {
                                            "type": "grid",
                                            "id": "r_pgag2x",
                                            "columns": [
                                                {
                                                    "span": 12,
                                                    "type": "column",
                                                    "id": "r_kzdmkt",
                                                    "components": [
                                                        {
                                                            "type": "textarea",
                                                            "id": "comp_prompt",
                                                            "label": "Prompt",
                                                            "placeholder": "write your prompt ...",
                                                            "isRequired": false,
                                                            "showError": false,
                                                            "value": "",
                                                            "min": 0,
                                                            "max": 512,
                                                            "hidden": false,
                                                            "exclude": false,
                                                            "invalid": false
                                                        }
                                                    ]
                                                },
                                                {
                                                    "span": 4,
                                                    "type": "column",
                                                    "id": "r_weaqlc",
                                                    "components": [
                                                        {
                                                            "type": "button",
                                                            "id": "comp_generate",
                                                            "text": "Generate",
                                                            "invalid": false
                                                        }
                                                    ]
                                                }
                                            ],
                                            "spanSum": 16,
                                            "isResizable": false
                                        },
                                        {
                                            "type": "grid",
                                            "id": "r_uact66",
                                            "columns": [
                                                {
                                                    "span": 12,
                                                    "type": "column",
                                                    "id": "r_kbf2aj",
                                                    "components": [
                                                        {
                                                            "type": "webComponent",
                                                            "id": "comp_model_1_select",
                                                            "source": "code",
                                                            "value": "<!-- Version 1.00 -->\n<style>\n    .custom-select {\n        font-family: Euclid Circular A,sans-serif;\n        text-align: center;\n        height: 40px;\n    }\n\n    select {\n        width: 100%;\n        height: 100%;\n        padding: 4px;\n        background-color: #fff;\n        border: 1px solid #caced1;\n        border-radius: 0.25rem;\n        cursor: pointer;\n        display: none;\n    }\n\n    .loader {\n        width: 40px;\n        height: 40px;\n        border: 5px solid #dedede;\n        border-bottom-color: transparent;\n        border-radius: 50%;\n        display: inline-block;\n        box-sizing: border-box;\n        animation: rotation 1s linear infinite;\n    }\n\n    @keyframes rotation {\n        0% {\n            transform: rotate(0deg);\n        }\n\n        100% {\n            transform: rotate(360deg);\n        }\n    }\n</style>\n<div class=\"custom-select\">\n    <span id=\"sa-spinner\" class=\"loader\"></span>\n    <select id=\"sa-custom-select\" onchange=\"onSelect(this)\"></select>\n</div>\n<script>\n    // Listen for messages from the main form\n    window.addEventListener('message', e => {\n        commandHandler(e.data.data);\n    });\n\n    function commandHandler(data) {\n        const options = JSON.parse(data);\n        removeAllOptions();\n        populateOptions(options);\n    }\n\n    function populateOptions(options) {\n        const selectEl = document.getElementById(\"sa-custom-select\");\n        const spinnerEl = document.getElementById(\"sa-spinner\");\n        options.forEach(option => {\n            const newOptionEl = document.createElement(\"option\");\n            newOptionEl.text = option.label;\n            newOptionEl.value = option.value;\n            selectEl.add(newOptionEl);\n        });\n        selectEl.style.setProperty(\"display\", \"inline-block\");\n        spinnerEl.style.setProperty(\"display\", \"none\");\n    }\n\n    function removeAllOptions() {\n        const selectEl = document.getElementById(\"sa-custom-select\");\n        let i, L = selectEl.options.length - 1;\n        for (i = L; i >= 0; i--) {\n            selectEl.remove(i);\n        }\n    }\n\n    function onSelect(e) {\n        window.parent.postMessage({ action: 'topy', data: e.value });\n    }\n</script>",
                                                            "height": 56,
                                                            "exclude": true,
                                                            "invalid": false
                                                        },
                                                        {
                                                            "type": "button",
                                                            "id": "add_as_item_1",
                                                            "text": "Copy in Q&A",
                                                            "invalid": false
                                                        },
                                                        {
                                                            "type": "webComponent",
                                                            "id": "comp_model_1_preview",
                                                            "source": "code",
                                                            "value": "<!-- Version 1.00 -->\n<div id=\"sa-main-container\"></div>\n<script type=\"text/javascript\" src=\"https://rawgit.com/showdownjs/showdown/develop/dist/showdown.min.js\"></script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/foundation/5.5.2/css/foundation.min.css\">\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css\">\n<style>\n    html,\n    body {\n        font-family: Euclid Circular A,sans-serif;\n        width: 100%;\n        height: 100%;\n        margin: 0;\n        padding: 8px;\n    }\n\n    html {\n        overflow-x: hidden;\n    }\n\n    @keyframes squeezeBody {\n        from {\n            width: 100%;\n        }\n\n        to {\n            width: calc(100% - 300px);\n        }\n    }\n\n    @-webkit-keyframes squeezeBody {\n        from {\n            width: 100%;\n        }\n\n        to {\n            width: calc(100% - 300px);\n        }\n    }\n\n    @keyframes stretchBody {\n        from {\n            width: calc(100% - 300px);\n        }\n\n        to {\n            width: 100%;\n        }\n    }\n\n    @-webkit-keyframes stretchBody {\n        from {\n            width: calc(100% - 300px);\n        }\n\n        to {\n            width: 100%;\n        }\n    }\n\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6 {\n        font-family: 'Old Standard TT', serif;\n        font-weight: bold;\n    }\n\n    h3 {\n        border-bottom: 1px solid #ddd;\n    }\n\n    .serif {\n        font-family: 'Old Standard TT', serif;\n    }\n\n    .top-bar {\n        height: 45px;\n        min-height: 45px;\n        position: absolute;\n        top: 0;\n        right: 0;\n        left: 0;\n    }\n\n    .bars-lnk {\n        color: #fff;\n    }\n\n    .bars-lnk i {\n        display: inline-block;\n        margin-left: 10px;\n        margin-top: 7px;\n    }\n\n    .bars-lnk img {\n        display: inline-block;\n        margin-left: 10px;\n        margin-top: -15px;\n        margin-right: 15px;\n        height: 35px;\n    }\n\n    .lateral-menu {\n        background-color: #333;\n        color: rgb(144, 144, 144);\n        width: 300px;\n        font-family: 'Open Sans', 'Myriad Pro', 'Lucida Grande', 'Lucida Sans Unicode', 'Lucida Sans', Geneva, Verdana, sans-serif;\n    }\n\n    .lateral-menu label {\n        color: rgb(144, 144, 144);\n    }\n\n    .lateral-menu-content {\n        padding-left: 10px;\n        height: 100%;\n        font-size: 12px;\n        font-style: normal;\n        font-variant: normal;\n        font-weight: bold;\n        line-height: 16px;\n    }\n\n    .lateral-menu-content .title {\n        padding-top: 15px;\n        font-size: 2em;\n        height: 45px;\n    }\n\n    .lateral-menu-content-inner {\n        overflow-y: auto;\n        height: 100%;\n        padding-top: 10px;\n        padding-bottom: 50px;\n        padding-right: 10px;\n        font-size: 0.9em;\n    }\n\n\n\n    .container {\n        display: flex;\n        flex-direction: row;\n        flex-wrap: nowrap;\n        justify-content: center;\n        align-items: stretch;\n        width: 100%;\n        height: 100%;\n        padding-top: 65px;\n    }\n\n    .container>* {\n        display: block;\n        width: 50%;\n        margin-left: 10px;\n        margin-right: 10px;\n        max-height: 100%;\n    }\n\n    .container textarea {\n        resize: none;\n        font-family: Consolas, \"Liberation Mono\", Courier, monospace;\n        height: 97%;\n        max-height: 97%;\n        width: 45%;\n    }\n\n    #preview {\n        height: 97%;\n        max-height: 97%;\n        border: 1px solid #eee;\n        overflow-y: scroll;\n        width: 55%;\n        padding: 10px;\n    }\n\n    pre {\n        white-space: pre-wrap;\n        /* css-3 */\n        white-space: -moz-pre-wrap;\n        /* Mozilla, since 1999 */\n        white-space: -pre-wrap;\n        /* Opera 4-6 */\n        white-space: -o-pre-wrap;\n        /* Opera 7 */\n        word-wrap: break-word;\n        /* Internet Explorer 5.5+ */\n        background-color: #f8f8f8;\n        border: 1px solid #dfdfdf;\n        margin-top: 1.5em;\n        margin-bottom: 1.5em;\n        padding: 0.125rem 0.3125rem 0.0625rem;\n    }\n\n    pre code {\n        background-color: transparent;\n        border: 0;\n        padding: 0;\n    }\n\n\n    .modal-wrapper {\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        top: 0;\n        left: 0;\n        z-index: 999;\n        background-color: rgba(51, 51, 51, 0.5);\n    }\n\n    .modal-inner {\n        margin-top: 200px;\n        margin-left: auto;\n        margin-right: auto;\n        width: 600px;\n        height: 225px;\n        background-color: #fff;\n        opacity: 1;\n        z-index: 1000;\n    }\n\n    .modal-close-btn {\n        float: right;\n        display: inline-block;\n        margin-right: 5px;\n        color: #ff4336;\n    }\n\n    .modal-close-btn:hover {\n        float: right;\n        display: inline-block;\n        margin-right: 5px;\n        color: #8d0002;\n    }\n\n    .modal-topbar {\n        clear: both;\n        height: 25px;\n    }\n\n    .modal-inner .link-area {\n        margin: 10px;\n        height: 170px;\n\n    }\n\n    .modal-inner textarea {\n        width: 100%;\n        height: 100%;\n        margin: 0;\n        padding: 0;\n    }\n\n    .version {\n        color: white;\n        font-size: 0.8em !important;\n    }\n</style>\n<script>\n    const outEl = document.getElementById(\"sa-main-container\");\n    const converter = new showdown.Converter({ tables: true, ghCodeBlocks: true });\n    let completion = \"\";\n\n    // Listen for messages from the main form\n    window.addEventListener('message', async e => {\n        try {\n            await commandHandler(e.data.data);\n        } catch (error) {\n            console.log(\">>> >>> >>> SuperAnnotate Error! >>> >>> >>>\", error.message);\n            window.parent.postMessage({ action: 'topy', data: { error: error.message } });\n        }\n    });\n\n    async function commandHandler(data) {\n        const parsedData = JSON.parse(data);\n        const { command } = parsedData;\n        switch (command) {\n            // Generate completions\n            case \"generate\":\n                completion = \"\";\n                outEl.innerHTML = converter.makeHtml(completion);\n                await generate(parsedData);\n                break;\n            // Get the latest completion\n            case \"get_completion\":\n                window.parent.postMessage({ action: 'topy', data: { data: completion } });\n                break;\n            // Receive the completion\n            case \"input\":\n                completion = parsedData.completion;\n                outEl.innerHTML = converter.makeHtml(completion);\n                break;\n            // Clear the UI\n            case \"clear\":\n                completion = \"\";\n                outEl.innerHTML = converter.makeHtml(completion);\n                break;\n            default:\n                window.parent.postMessage({ action: 'topy', data: { error: \"Wrong command.\" } });\n                break;\n        }\n    }\n\n    async function generate(data) {\n        const { url, api_key, model, prompt, context, stream_up } = data;\n        const requestBody = {\n            \"model\": model,\n            \"messages\": [{ \"role\": \"user\", \"content\": prompt }],\n            \"stream\": true\n        };\n        if (context) {\n            requestBody.messages.unshift({\"role\": \"system\", \"content\": context})\n        }\n        const response = await openAICompletion(url, api_key, requestBody);\n        const reader = response.getReader();\n\n        // Start reading from the stream\n        for (let index = 0; index < 1000000; index++) {\n            const { value, done } = await reader.read();\n\n            // Streaming will stop on `done` event or after 1m iterations (for loop)\n            if (done) break;\n\n            // `value` is a `Uint8Array`. Convert it to string.\n            const textChunk = new TextDecoder().decode(value);\n            // Retreave server send event rows\n            textChunk.split(\"data: \").forEach(line => {\n                const trimmed = line.trim();\n                // Get start of the object\n                if (trimmed.indexOf(\"{\") === 0) {\n                    const dataObj = JSON.parse(trimmed);\n                    const token = dataObj.choices[0].delta.content\n                    if (token !== undefined) {\n                        completion += token;\n                        outEl.innerHTML = converter.makeHtml(completion);\n                        // Send back to the main form\n                        if (stream_up) {\n                            window.parent.postMessage({ action: 'topy', data: { data: completion } });\n                        }\n                    }\n                }\n            })\n        }\n    }\n\n    async function openAICompletion(url, api_key, data) {\n        const headers = { \"Content-Type\": \"application/json\" };\n        if (api_key) {\n            headers.Authorization = `Bearer  ${api_key}`;\n        }\n\n        return fetch(url, {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n        })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`POST ${url} responded with ${response.status} status code.`);\n                } else {\n                    return response.body;\n                }\n            })\n            .catch(error => {\n                throw error;\n            });\n    }\n</script>",
                                                            "height": 400,
                                                            "exclude": true,
                                                            "invalid": false
                                                        }
                                                    ]
                                                },
                                                {
                                                    "span": 12,
                                                    "type": "column",
                                                    "id": "r_o0uslh",
                                                    "components": [
                                                        {
                                                            "type": "webComponent",
                                                            "id": "comp_model_2_select",
                                                            "source": "code",
                                                            "value": "<!-- Version 1.00 -->\n<style>\n    .custom-select {\n        font-family: Euclid Circular A,sans-serif;\n        text-align: center;\n        height: 40px;\n    }\n\n    select {\n        width: 100%;\n        height: 100%;\n        padding: 4px;\n        background-color: #fff;\n        border: 1px solid #caced1;\n        border-radius: 0.25rem;\n        cursor: pointer;\n        display: none;\n    }\n\n    .loader {\n        width: 40px;\n        height: 40px;\n        border: 5px solid #dedede;\n        border-bottom-color: transparent;\n        border-radius: 50%;\n        display: inline-block;\n        box-sizing: border-box;\n        animation: rotation 1s linear infinite;\n    }\n\n    @keyframes rotation {\n        0% {\n            transform: rotate(0deg);\n        }\n\n        100% {\n            transform: rotate(360deg);\n        }\n    }\n</style>\n<div class=\"custom-select\">\n    <span id=\"sa-spinner\" class=\"loader\"></span>\n    <select id=\"sa-custom-select\" onchange=\"onSelect(this)\"></select>\n</div>\n<script>\n    // Listen for messages from the main form\n    window.addEventListener('message', e => {\n        commandHandler(e.data.data);\n    });\n\n    function commandHandler(data) {\n        const options = JSON.parse(data);\n        removeAllOptions();\n        populateOptions(options);\n    }\n\n    function populateOptions(options) {\n        const selectEl = document.getElementById(\"sa-custom-select\");\n        const spinnerEl = document.getElementById(\"sa-spinner\");\n        options.forEach(option => {\n            const newOptionEl = document.createElement(\"option\");\n            newOptionEl.text = option.label;\n            newOptionEl.value = option.value;\n            selectEl.add(newOptionEl);\n        });\n        selectEl.style.setProperty(\"display\", \"inline-block\");\n        spinnerEl.style.setProperty(\"display\", \"none\");\n    }\n\n    function removeAllOptions() {\n        const selectEl = document.getElementById(\"sa-custom-select\");\n        let i, L = selectEl.options.length - 1;\n        for (i = L; i >= 0; i--) {\n            selectEl.remove(i);\n        }\n    }\n\n    function onSelect(e) {\n        window.parent.postMessage({ action: 'topy', data: e.value });\n    }\n</script>",
                                                            "height": 56,
                                                            "exclude": true,
                                                            "invalid": false
                                                        },
                                                        {
                                                            "type": "button",
                                                            "id": "add_as_item_2",
                                                            "text": "Copy in Q&A",
                                                            "invalid": false
                                                        },
                                                        {
                                                            "type": "webComponent",
                                                            "id": "comp_model_2_preview",
                                                            "source": "code",
                                                            "value": "<!-- Version 1.00 -->\n<div id=\"sa-main-container\"></div>\n<script type=\"text/javascript\" src=\"https://rawgit.com/showdownjs/showdown/develop/dist/showdown.min.js\"></script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/foundation/5.5.2/css/foundation.min.css\">\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css\">\n<style>\n    html,\n    body {\n        font-family: Euclid Circular A,sans-serif;\n        width: 100%;\n        height: 100%;\n        margin: 0;\n        padding: 8px;\n    }\n\n    html {\n        overflow-x: hidden;\n    }\n\n    @keyframes squeezeBody {\n        from {\n            width: 100%;\n        }\n\n        to {\n            width: calc(100% - 300px);\n        }\n    }\n\n    @-webkit-keyframes squeezeBody {\n        from {\n            width: 100%;\n        }\n\n        to {\n            width: calc(100% - 300px);\n        }\n    }\n\n    @keyframes stretchBody {\n        from {\n            width: calc(100% - 300px);\n        }\n\n        to {\n            width: 100%;\n        }\n    }\n\n    @-webkit-keyframes stretchBody {\n        from {\n            width: calc(100% - 300px);\n        }\n\n        to {\n            width: 100%;\n        }\n    }\n\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6 {\n        font-family: 'Old Standard TT', serif;\n        font-weight: bold;\n    }\n\n    h3 {\n        border-bottom: 1px solid #ddd;\n    }\n\n    .serif {\n        font-family: 'Old Standard TT', serif;\n    }\n\n    .top-bar {\n        height: 45px;\n        min-height: 45px;\n        position: absolute;\n        top: 0;\n        right: 0;\n        left: 0;\n    }\n\n    .bars-lnk {\n        color: #fff;\n    }\n\n    .bars-lnk i {\n        display: inline-block;\n        margin-left: 10px;\n        margin-top: 7px;\n    }\n\n    .bars-lnk img {\n        display: inline-block;\n        margin-left: 10px;\n        margin-top: -15px;\n        margin-right: 15px;\n        height: 35px;\n    }\n\n    .lateral-menu {\n        background-color: #333;\n        color: rgb(144, 144, 144);\n        width: 300px;\n        font-family: 'Open Sans', 'Myriad Pro', 'Lucida Grande', 'Lucida Sans Unicode', 'Lucida Sans', Geneva, Verdana, sans-serif;\n    }\n\n    .lateral-menu label {\n        color: rgb(144, 144, 144);\n    }\n\n    .lateral-menu-content {\n        padding-left: 10px;\n        height: 100%;\n        font-size: 12px;\n        font-style: normal;\n        font-variant: normal;\n        font-weight: bold;\n        line-height: 16px;\n    }\n\n    .lateral-menu-content .title {\n        padding-top: 15px;\n        font-size: 2em;\n        height: 45px;\n    }\n\n    .lateral-menu-content-inner {\n        overflow-y: auto;\n        height: 100%;\n        padding-top: 10px;\n        padding-bottom: 50px;\n        padding-right: 10px;\n        font-size: 0.9em;\n    }\n\n\n\n    .container {\n        display: flex;\n        flex-direction: row;\n        flex-wrap: nowrap;\n        justify-content: center;\n        align-items: stretch;\n        width: 100%;\n        height: 100%;\n        padding-top: 65px;\n    }\n\n    .container>* {\n        display: block;\n        width: 50%;\n        margin-left: 10px;\n        margin-right: 10px;\n        max-height: 100%;\n    }\n\n    .container textarea {\n        resize: none;\n        font-family: Consolas, \"Liberation Mono\", Courier, monospace;\n        height: 97%;\n        max-height: 97%;\n        width: 45%;\n    }\n\n    #preview {\n        height: 97%;\n        max-height: 97%;\n        border: 1px solid #eee;\n        overflow-y: scroll;\n        width: 55%;\n        padding: 10px;\n    }\n\n    pre {\n        white-space: pre-wrap;\n        /* css-3 */\n        white-space: -moz-pre-wrap;\n        /* Mozilla, since 1999 */\n        white-space: -pre-wrap;\n        /* Opera 4-6 */\n        white-space: -o-pre-wrap;\n        /* Opera 7 */\n        word-wrap: break-word;\n        /* Internet Explorer 5.5+ */\n        background-color: #f8f8f8;\n        border: 1px solid #dfdfdf;\n        margin-top: 1.5em;\n        margin-bottom: 1.5em;\n        padding: 0.125rem 0.3125rem 0.0625rem;\n    }\n\n    pre code {\n        background-color: transparent;\n        border: 0;\n        padding: 0;\n    }\n\n\n    .modal-wrapper {\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        top: 0;\n        left: 0;\n        z-index: 999;\n        background-color: rgba(51, 51, 51, 0.5);\n    }\n\n    .modal-inner {\n        margin-top: 200px;\n        margin-left: auto;\n        margin-right: auto;\n        width: 600px;\n        height: 225px;\n        background-color: #fff;\n        opacity: 1;\n        z-index: 1000;\n    }\n\n    .modal-close-btn {\n        float: right;\n        display: inline-block;\n        margin-right: 5px;\n        color: #ff4336;\n    }\n\n    .modal-close-btn:hover {\n        float: right;\n        display: inline-block;\n        margin-right: 5px;\n        color: #8d0002;\n    }\n\n    .modal-topbar {\n        clear: both;\n        height: 25px;\n    }\n\n    .modal-inner .link-area {\n        margin: 10px;\n        height: 170px;\n\n    }\n\n    .modal-inner textarea {\n        width: 100%;\n        height: 100%;\n        margin: 0;\n        padding: 0;\n    }\n\n    .version {\n        color: white;\n        font-size: 0.8em !important;\n    }\n</style>\n<script>\n    const outEl = document.getElementById(\"sa-main-container\");\n    const converter = new showdown.Converter({ tables: true, ghCodeBlocks: true });\n    let completion = \"\";\n\n    // Listen for messages from the main form\n    window.addEventListener('message', async e => {\n        try {\n            await commandHandler(e.data.data);\n        } catch (error) {\n            console.log(\">>> >>> >>> SuperAnnotate Error! >>> >>> >>>\", error.message);\n            window.parent.postMessage({ action: 'topy', data: { error: error.message } });\n        }\n    });\n\n    async function commandHandler(data) {\n        const parsedData = JSON.parse(data);\n        const { command } = parsedData;\n        switch (command) {\n            // Generate completions\n            case \"generate\":\n                completion = \"\";\n                outEl.innerHTML = converter.makeHtml(completion);\n                await generate(parsedData);\n                break;\n            // Get the latest completion\n            case \"get_completion\":\n                window.parent.postMessage({ action: 'topy', data: { data: completion } });\n                break;\n            // Receive the completion\n            case \"input\":\n                completion = parsedData.completion;\n                outEl.innerHTML = converter.makeHtml(completion);\n                break;\n            // Clear the UI\n            case \"clear\":\n                completion = \"\";\n                outEl.innerHTML = converter.makeHtml(completion);\n                break;\n            default:\n                window.parent.postMessage({ action: 'topy', data: { error: \"Wrong command.\" } });\n                break;\n        }\n    }\n\n    async function generate(data) {\n        const { url, api_key, model, prompt, context, stream_up } = data;\n        const requestBody = {\n            \"model\": model,\n            \"messages\": [{ \"role\": \"user\", \"content\": prompt }],\n            \"stream\": true\n        };\n        if (context) {\n            requestBody.messages.unshift({\"role\": \"system\", \"content\": context})\n        }\n        const response = await openAICompletion(url, api_key, requestBody);\n        const reader = response.getReader();\n\n        // Start reading from the stream\n        for (let index = 0; index < 1000000; index++) {\n            const { value, done } = await reader.read();\n\n            // Streaming will stop on `done` event or after 1m iterations (for loop)\n            if (done) break;\n\n            // `value` is a `Uint8Array`. Convert it to string.\n            const textChunk = new TextDecoder().decode(value);\n            // Retreave server send event rows\n            textChunk.split(\"data: \").forEach(line => {\n                const trimmed = line.trim();\n                // Get start of the object\n                if (trimmed.indexOf(\"{\") === 0) {\n                    const dataObj = JSON.parse(trimmed);\n                    const token = dataObj.choices[0].delta.content\n                    if (token !== undefined) {\n                        completion += token;\n                        outEl.innerHTML = converter.makeHtml(completion);\n                        // Send back to the main form\n                        if (stream_up) {\n                            window.parent.postMessage({ action: 'topy', data: { data: completion } });\n                        }\n                    }\n                }\n            })\n        }\n    }\n\n    async function openAICompletion(url, api_key, data) {\n        const headers = { \"Content-Type\": \"application/json\" };\n        if (api_key) {\n            headers.Authorization = `Bearer  ${api_key}`;\n        }\n\n        return fetch(url, {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n        })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`POST ${url} responded with ${response.status} status code.`);\n                } else {\n                    return response.body;\n                }\n            })\n            .catch(error => {\n                throw error;\n            });\n    }\n</script>",
                                                            "height": 400,
                                                            "exclude": true,
                                                            "invalid": false
                                                        }
                                                    ]
                                                }
                                            ],
                                            "spanSum": 24,
                                            "isResizable": false
                                        }
                                    ]
                                }
                            ],
                            "invalid": false
                        }
                    ]
                }
            ],
            "spanSum": 12,
            "isResizable": false,
            "invalid": false
        }
    ],
    "code": "from typing import List, Union\nfrom accessor import (\n    getValue,\n    repeatRow,\n    deleteRow,\n    setValue,\n    setLoading,\n    getGroupLength,\n    postMessageToWebComponent,\n)\nfrom environments import url, open_ai_api_key\nimport json\nfrom js import localStorage, window\nfrom datetime import datetime\n\ntextarea_context = ['context']\ntextarea_prompt = ['prompt']\nrating_rating = ['rating']\nwebComponent_comp_preview = ['comp_preview']\ncode_comp_code = ['comp_code']\nwebComponent_fine_tuning_web = ['fine_tuning_web']\nparagraph_collection_length = ['collection_length']\nwebComponent_model_select_custom = ['model_select_custom']\nwebComponent_comp_model_1_select = ['comp_model_1_select']\nwebComponent_comp_model_2_select = ['comp_model_2_select']\nwebComponent_comp_model_1_preview = ['comp_model_1_preview']\nwebComponent_comp_model_2_preview = ['comp_model_2_preview']\ntextarea_comp_prompt = ['comp_prompt']\ninput_model_suffix = ['model_suffix']\ninput_file_name = ['file_name']\nparagraph_training_file_name = ['training_file_name']\nparagraph_training_file_id = ['training_file_id']\nselect_base_model = ['base_model']\ncollection = []\nfine_tuning_jobs = []\nselected_model = 'gpt-3.5-turbo'\nselected_comp_model_1 = selected_model\nselected_comp_model_2 = selected_model\nsupported_models = [\n    'gpt-3.5-turbo-16k-0613',\n    'gpt-3.5-turbo-0613',\n    'gpt-3.5-turbo',\n    'gpt-3.5-turbo-16k',\n    'gpt-4',\n    'gpt-4-0314',\n    'gpt-4-0613',\n    'gpt-3.5-turbo-0301'\n]\n\n### Helper functions\ndef init():\n    valid_key = validateOpenAIKey()\n    model_options = [{\n        'label': selected_model,\n        'value': selected_model\n    }]\n    postMessageToWebComponent(webComponent_model_select_custom, json.dumps(model_options))\n    postMessageToWebComponent(webComponent_comp_model_1_select, json.dumps(model_options))\n    postMessageToWebComponent(webComponent_comp_model_2_select, json.dumps(model_options))\n    global collection\n    collection = get_data()\n    reset_item_form()\n    update_collection_table()\n\n    if valid_key == True:\n        to_open_ai_api('init', api_key=open_ai_api_key)\n        to_open_ai_api('list_models')\n        to_open_ai_api('list_fine_tuning_jobs')\n        to_open_ai_api('list_files')\n\ndef validateOpenAIKey():\n    if (open_ai_api_key == '' or open_ai_api_key == None):\n        if(getGroupLength(['warning']) > 0):\n            deleteRow(['warning', -1])\n        repeatRow(['warning'])\n        return False\n    else:\n        return True\n\ndef get_data():\n    data_str = localStorage.getItem(\"SA_data\")\n    try:\n        data_json = json.loads(data_str)\n        return data_json\n    except:\n        return []\n\ndef set_data():\n    localStorage.setItem(\"SA_data\", json.dumps(collection))\n\ndef add_data_row(prompt: str, completion: str, rating: int):\n    data_row = {\n        'prompt': prompt,\n        'completion': completion,\n        'rating': rating\n    }\n    collection.insert(0, data_row)\n    set_data()\n    update_collection_table()\n\ndef delete_data_row(index):\n    collection.pop(index)\n    set_data()\n    setValue(paragraph_collection_length, len(collection))\n\ndef update_collection_table():\n    table_length = getGroupLength(['table_collection'])\n    for x in range(table_length):\n        deleteRow(['table_collection', -1])\n    row_index = 1\n    for data_row in collection:\n        repeatRow(['table_collection'])\n        setValue(['table_collection', -1, 'row_index'], row_index)\n        setValue(['table_collection', -1, 'row_prompt'], data_row['prompt'])\n        setValue(['table_collection', -1, 'row_comp'], data_row['completion'])\n        setValue(['table_collection', -1, 'row_rating'], data_row['rating'])\n        row_index += 1\n    setValue(paragraph_collection_length, len(collection))\n\ndef reset_item_form():\n    setValue(textarea_prompt, \"\")\n    to_chat_gpt_generator('clear')\n    setValue(rating_rating, 0)\n    setValue(code_comp_code, \"\")\n\ndef to_open_ai_api(command, api_key='', context='', file_id='', file_name='', dataset='', base_model='', suffix=''):\n    request_data = {\n        'command': command,\n        'api_key': api_key,\n        'file_id': file_id,\n        'file_name': file_name,\n        'dataset': dataset,\n        'base_model': base_model,\n        'suffix': suffix,\n        'context': context\n    }\n    postMessageToWebComponent(webComponent_fine_tuning_web, json.dumps(request_data));\n    return\n\ndef from_open_ai_api(response):\n    # error = ''\n    # if 'error' in response:\n    #     error = response['error']\n    #     window.alert(error)\n    #     return\n    \n    command = ''\n    if 'command' in response:\n        command = response['command']\n\n    match command:\n        case 'list_models':\n            model_options = []\n            for model in response['data']['data']:\n                if(is_model_supported(model['id']) or is_model_supported(model['root'])):\n                    model_option = {\n                        'label': model['id'],\n                        'value': model['id']\n                    }\n                    model_options.insert(0, model_option)\n            global selected_model\n            selected_model = model_options[0]['value']\n            global selected_comp_model_1\n            selected_comp_model_1 = model_options[0]['value']\n            global selected_comp_model_2\n            selected_comp_model_2 = model_options[0]['value']\n            postMessageToWebComponent(webComponent_model_select_custom, json.dumps(model_options))\n            postMessageToWebComponent(webComponent_comp_model_1_select, json.dumps(model_options))\n            postMessageToWebComponent(webComponent_comp_model_2_select, json.dumps(model_options))\n        case 'list_fine_tuning_jobs':\n            global fine_tuning_jobs\n            fine_tuning_jobs = response['data']['data']\n            update_job_events_table()\n            pass\n        case 'list_files':\n            index = 1\n            for file in response['data']['data']:\n                repeatRow(['files_row'])\n                setValue(['files_row', -1, 'file_index_row'], index)\n                setValue(['files_row', -1, 'file_name_row'], file['filename'])\n                setValue(['files_row', -1, 'file_id_row'], file['id'])\n                index += 1\n        case 'delete_file':\n            pass\n        case 'upload_file':\n            file = response['data']\n            repeatRow(['files_row'])\n            setValue(['files_row', -1, 'file_index_row'], getGroupLength(['files_row']))\n            setValue(['files_row', -1, 'file_name_row'], file['filename'])\n            setValue(['files_row', -1, 'file_id_row'], file['id'])\n            setValue(input_file_name, '')\n            setLoading(False)\n        case 'create_fine_tuning_job':\n            to_open_ai_api('list_fine_tuning_jobs')\n            setLoading(False)\n        case _: print('Wrong response!')\n    return\n\ndef update_job_events_table():\n    is_running = False\n    table_length = getGroupLength(['job_events'])\n    for x in range(table_length):\n        deleteRow(['job_events', -1])\n    for job in fine_tuning_jobs:\n        if(job['status'] == 'validating_files' or job['status'] == 'queued' or job['status'] == 'running'):\n            repeatRow(['job_events'])\n            setValue(['job_events', -1, 'running_job_id'], job['id'])\n            setValue(['job_events', -1, 'running_job_model'], job['fine_tuned_model'])\n            setValue(['job_events', -1, 'running_job_status'], job['status'])\n            is_running = True\n    if (is_running == False):\n        to_open_ai_api('list_models')\n    return is_running\n\ndef to_chat_gpt_generator(command, url=\"\", model=\"\", context=\"\", prompt=\"\", completion=\"\", stream_up=False, web_component_inst=webComponent_comp_preview):\n    request_data = {\n        'command': command,\n        'url': url,\n        'model': model,\n        'prompt': prompt,\n        'completion': completion,\n        'context': context,\n        'stream_up': stream_up\n    }\n    postMessageToWebComponent(web_component_inst, json.dumps(request_data));\n\ndef from_chat_gpt_generator(data):\n    if 'error' in data:\n        window.alert(data['error'])\n        return ''\n    elif 'data' in data:\n        return data['data']\n    else:\n        return ''\n\n### Event handlers\ndef on_generate_click(path: List[Union[str, int]]):\n    context = getValue(textarea_context)\n    promt_text = getValue(textarea_prompt)\n    if(promt_text == '' or promt_text == None):\n        window.alert(\"Please enter a prompt.\")\n    else:\n        setLoading(True)\n        to_chat_gpt_generator('generate',\n                              url=url,\n                              context=context,\n                              prompt=promt_text,\n                              model=selected_model,\n                              stream_up=True,\n                              web_component_inst=webComponent_comp_preview)\n    return\n\ndef on_add_click(path: List[Union[str, int]]):\n    new_prmt = getValue(textarea_prompt)\n    new_comp = getValue(code_comp_code)\n    new_rate = getValue(rating_rating)\n\n    add_data_row(new_prmt, new_comp, new_rate)\n    reset_item_form()\n    return\n\ndef on_comp_preview_message(path: List[Union[str, int]], value):\n    setLoading(False)\n    text = from_chat_gpt_generator(value)\n    setValue(code_comp_code, text)\n    return\n\ndef on_comp_code_change(path: List[Union[str, int]], value):\n    to_chat_gpt_generator(command='input', completion=value)\n    return\n\ndef on_table_collection_deleted(path: List[Union[str, int]]):\n    print(path)\n    delete_data_row(path[1])\n    return\n\ndef on_row_prompt_change(path: List[Union[str, int]], value):\n    global collection\n    collection[path[1]]['prompt'] = value\n    set_data()\n    return\n\ndef on_row_comp_change(path: List[Union[str, int]], value):\n    global collection\n    collection[path[1]]['completion'] = value\n    set_data()\n    return\n\ndef on_row_rating_change(path: List[Union[str, int]], value):\n    global collection\n    collection[path[1]]['rating'] = value\n    set_data()\n    return\n\ndef on_fine_tuning_web_message(path: List[Union[str, int]], value):\n    response = json.loads(value)\n    from_open_ai_api(response)\n    return\n\ndef on_model_select_custom_message(path: List[Union[str, int]], value):\n    global selected_model\n    selected_model = value\n    return\n\ndef on_comp_model_1_select_message(path: List[Union[str, int]], value):\n    global selected_comp_model_1\n    selected_comp_model_1 = value\n    return\n\ndef on_comp_model_2_select_message(path: List[Union[str, int]], value):\n    global selected_comp_model_2\n    selected_comp_model_2 = value\n    return\n\ndef on_comp_model_1_preview_message(path: List[Union[str, int]], value):\n    setValue(code_comp_code, value)\n    to_chat_gpt_generator(command='input', completion=value)\n    return\n\ndef on_comp_model_2_preview_message(path: List[Union[str, int]], value):\n    setValue(code_comp_code, value)\n    to_chat_gpt_generator(command='input', completion=value)\n    return\n\ndef on_comp_generate_click(path: List[Union[str, int]]):\n    context = getValue(textarea_context)\n    promt_text = getValue(textarea_comp_prompt)\n    if(promt_text == '' or promt_text == None):\n        window.alert(\"Please enter a prompt.\")\n        return\n    request_data_1 = {\n        'command': 'generate',\n        'url': url,\n        'context': context,\n        'prompt': promt_text,\n        'model': selected_comp_model_1\n    }\n\n    to_chat_gpt_generator('generate',\n                          url=url,\n                          model=selected_comp_model_1,\n                          context=context,\n                          prompt=promt_text,\n                          stream_up=False,\n                          web_component_inst=webComponent_comp_model_1_preview)\n    to_chat_gpt_generator('generate',\n                          url=url,\n                          model=selected_comp_model_2,\n                          context=context,\n                          prompt=promt_text,\n                          stream_up=False,\n                          web_component_inst=webComponent_comp_model_2_preview)\n    return\n\ndef on_add_as_item_1_click(path: List[Union[str, int]]):\n    prompt = getValue(textarea_comp_prompt)\n    setValue(textarea_prompt, prompt)\n    request_data = {\n        'command': 'get_completion'\n    }\n    postMessageToWebComponent(webComponent_comp_model_1_preview, json.dumps(request_data))\n    return\n\ndef on_add_as_item_2_click(path: List[Union[str, int]]):\n    prompt = getValue(textarea_comp_prompt)\n    setValue(textarea_prompt, prompt)\n    request_data = {\n        'command': 'get_completion'\n    }\n    postMessageToWebComponent(webComponent_comp_model_2_preview, json.dumps(request_data))\n    return\n\ndef on_clear_collection_click(path: List[Union[str, int]]):\n    if (window.confirm(\"Are you sure, you want to clear the collection?\")):\n        global collection\n        collection = []\n        set_data()\n        update_collection_table()\n    return\n\ndef on_import_collection_message(path: List[Union[str, int]], value):\n    data_json = json.loads(value)\n    index = 0\n    for data_row in data_json:\n        if(index > 0):\n            if (len(data_row) > 2 ):\n                data_row = {\n                    'prompt': data_row[0],\n                    'completion': data_row[1],\n                    'rating': data_row[2],\n                    'comment': data_row[3]\n                }\n                collection.insert(0, data_row)\n        index += 1\n    set_data()\n    update_collection_table()\n\n    return\n\ndef on_use_file_click(path: List[Union[str, int]]):\n    file_name = getValue(['files_row', path[1], 'file_name_row'])\n    file_id = getValue(['files_row', path[1], 'file_id_row'])\n    setValue(paragraph_training_file_name, file_name)\n    setValue(paragraph_training_file_id, file_id)\n    return\n\ndef on_files_row_deleted(path: List[Union[str, int]]):\n    file_id = getValue(['files_row', path[1], 'file_id_row'])\n    to_open_ai_api('delete_file', file_id=file_id)\n    return\n\ndef on_upload_button_click(path: List[Union[str, int]]):\n    if (validateOpenAIKey() == False):\n        return\n\n    setLoading(True)\n    file_name = getValue(input_file_name)\n    context = getValue(textarea_context)\n    if (file_name == '' or file_name == None):\n        file_name = \"new_collection\"\n        setValue(input_file_name, file_name)\n\n    to_open_ai_api('upload_file', file_name=file_name, dataset=collection, context=context)\n    return\n\ndef on_start_training_click(path: List[Union[str, int]]):\n    suffix = getValue(input_model_suffix)\n    file_id = getValue(paragraph_training_file_id)\n    base_model = getValue(select_base_model)\n\n    if (base_model == '' or base_model == None):\n        window.alert(\"Please chose a base model!\")\n        return\n    if (suffix == '' or suffix == None):\n        suffix = \"new_model\"\n        setValue(input_model_suffix, suffix)\n    if (file_id == '' or file_id == None):\n        window.alert(\"No file is chosen!\")\n        return\n\n    is_running = update_job_events_table()\n    if (is_running):\n        window.alert(\"You already have a running job!\")\n        return\n\n    setLoading(True)\n    to_open_ai_api('create_fine_tuning_job', base_model=base_model, file_id=file_id, suffix=suffix)\n    return\n\ndef is_model_supported(model):\n    try:\n        return (supported_models.index(model) >= 0)\n    except:\n        return False\n\ninit()\n",
    "environments": [
        {
            "name": "url",
            "value": "https://generative.superannotate.com/generate",
            "secure": false
        },
        {
            "name": "open_ai_api_key",
            "value": "",
            "secure": true
        }
    ]
}
