{"components":[{"type":"textarea","id":"prompt","label":"Prompt","placeholder":"","isRequired":false,"showError":false,"value":"","min":0,"max":512,"hidden":false,"exclude":false,"invalid":false},{"type":"button","id":"generate","text":"Generate","invalid":false},{"type":"paragraph","id":"answer_title","label":"","value":"Answer","exclude":true,"invalid":false},{"type":"webComponent","id":"markdown","source":"code","value":"<!-- Version 1.00 -->\n<div id=\"sa-main-container\"></div>\n<script type=\"text/javascript\" src=\"https://rawgit.com/showdownjs/showdown/develop/dist/showdown.min.js\"></script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/foundation/5.5.2/css/foundation.min.css\">\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css\">\n<style>\n    html,\n    body {\n        font-family: Euclid Circular A,sans-serif;\n        width: 100%;\n        height: 100%;\n        margin: 0;\n        padding: 8px;\n        background-color: #f0f0f0\n    }\n\n    html {\n        overflow-x: hidden;\n    }\n\n    @keyframes squeezeBody {\n        from {\n            width: 100%;\n        }\n\n        to {\n            width: calc(100% - 300px);\n        }\n    }\n\n    @-webkit-keyframes squeezeBody {\n        from {\n            width: 100%;\n        }\n\n        to {\n            width: calc(100% - 300px);\n        }\n    }\n\n    @keyframes stretchBody {\n        from {\n            width: calc(100% - 300px);\n        }\n\n        to {\n            width: 100%;\n        }\n    }\n\n    @-webkit-keyframes stretchBody {\n        from {\n            width: calc(100% - 300px);\n        }\n\n        to {\n            width: 100%;\n        }\n    }\n\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6 {\n        font-family: 'Old Standard TT', serif;\n        font-weight: bold;\n    }\n\n    h3 {\n        border-bottom: 1px solid #ddd;\n    }\n\n    .serif {\n        font-family: 'Old Standard TT', serif;\n    }\n\n    .top-bar {\n        height: 45px;\n        min-height: 45px;\n        position: absolute;\n        top: 0;\n        right: 0;\n        left: 0;\n    }\n\n    .bars-lnk {\n        color: #fff;\n    }\n\n    .bars-lnk i {\n        display: inline-block;\n        margin-left: 10px;\n        margin-top: 7px;\n    }\n\n    .bars-lnk img {\n        display: inline-block;\n        margin-left: 10px;\n        margin-top: -15px;\n        margin-right: 15px;\n        height: 35px;\n    }\n\n    .lateral-menu {\n        background-color: #333;\n        color: rgb(144, 144, 144);\n        width: 300px;\n        font-family: 'Open Sans', 'Myriad Pro', 'Lucida Grande', 'Lucida Sans Unicode', 'Lucida Sans', Geneva, Verdana, sans-serif;\n    }\n\n    .lateral-menu label {\n        color: rgb(144, 144, 144);\n    }\n\n    .lateral-menu-content {\n        padding-left: 10px;\n        height: 100%;\n        font-size: 12px;\n        font-style: normal;\n        font-variant: normal;\n        font-weight: bold;\n        line-height: 16px;\n    }\n\n    .lateral-menu-content .title {\n        padding-top: 15px;\n        font-size: 2em;\n        height: 45px;\n    }\n\n    .lateral-menu-content-inner {\n        overflow-y: auto;\n        height: 100%;\n        padding-top: 10px;\n        padding-bottom: 50px;\n        padding-right: 10px;\n        font-size: 0.9em;\n    }\n\n\n\n    .container {\n        display: flex;\n        flex-direction: row;\n        flex-wrap: nowrap;\n        justify-content: center;\n        align-items: stretch;\n        width: 100%;\n        height: 100%;\n        padding-top: 65px;\n    }\n\n    .container>* {\n        display: block;\n        width: 50%;\n        margin-left: 10px;\n        margin-right: 10px;\n        max-height: 100%;\n    }\n\n    .container textarea {\n        resize: none;\n        font-family: Consolas, \"Liberation Mono\", Courier, monospace;\n        height: 97%;\n        max-height: 97%;\n        width: 45%;\n    }\n\n    #preview {\n        height: 97%;\n        max-height: 97%;\n        border: 1px solid #eee;\n        overflow-y: scroll;\n        width: 55%;\n        padding: 10px;\n    }\n\n    pre {\n        white-space: pre-wrap;\n        /* css-3 */\n        white-space: -moz-pre-wrap;\n        /* Mozilla, since 1999 */\n        white-space: -pre-wrap;\n        /* Opera 4-6 */\n        white-space: -o-pre-wrap;\n        /* Opera 7 */\n        word-wrap: break-word;\n        /* Internet Explorer 5.5+ */\n        background-color: #f8f8f8;\n        border: 1px solid #dfdfdf;\n        margin-top: 1.5em;\n        margin-bottom: 1.5em;\n        padding: 0.125rem 0.3125rem 0.0625rem;\n    }\n\n    pre code {\n        background-color: transparent;\n        border: 0;\n        padding: 0;\n    }\n\n\n    .modal-wrapper {\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        top: 0;\n        left: 0;\n        z-index: 999;\n        background-color: rgba(51, 51, 51, 0.5);\n    }\n\n    .modal-inner {\n        margin-top: 200px;\n        margin-left: auto;\n        margin-right: auto;\n        width: 600px;\n        height: 225px;\n        background-color: #fff;\n        opacity: 1;\n        z-index: 1000;\n    }\n\n    .modal-close-btn {\n        float: right;\n        display: inline-block;\n        margin-right: 5px;\n        color: #ff4336;\n    }\n\n    .modal-close-btn:hover {\n        float: right;\n        display: inline-block;\n        margin-right: 5px;\n        color: #8d0002;\n    }\n\n    .modal-topbar {\n        clear: both;\n        height: 25px;\n    }\n\n    .modal-inner .link-area {\n        margin: 10px;\n        height: 170px;\n\n    }\n\n    .modal-inner textarea {\n        width: 100%;\n        height: 100%;\n        margin: 0;\n        padding: 0;\n    }\n\n    .version {\n        color: white;\n        font-size: 0.8em !important;\n    }\n</style>\n<script>\n    const outEl = document.getElementById(\"sa-main-container\");\n    const converter = new showdown.Converter({ tables: true, ghCodeBlocks: true });\n    let completion = \"\";\n\n    // Listen for messages from the main form\n    window.addEventListener('message', async e => {\n        try {\n            await commandHandler(e.data.data);\n        } catch (error) {\n            console.log(\">>> >>> >>> SuperAnnotate Error! >>> >>> >>>\", error.message);\n            window.parent.postMessage({ action: 'topy', data: { error: error.message } });\n        }\n    });\n\n    async function commandHandler(data) {\n        const parsedData = JSON.parse(data);\n        const { command } = parsedData;\n        switch (command) {\n            // Generate completions\n            case \"generate\":\n                completion = \"\";\n                outEl.innerHTML = converter.makeHtml(completion);\n                await generate(parsedData);\n                break;\n            // Get the latest completion\n            case \"get_completion\":\n                window.parent.postMessage({ action: 'topy', data: { data: completion } });\n                break;\n            // Receive the completion\n            case \"input\":\n                completion = parsedData.completion;\n                outEl.innerHTML = converter.makeHtml(completion);\n                break;\n            // Clear the UI\n            case \"clear\":\n                completion = \"\";\n                outEl.innerHTML = converter.makeHtml(completion);\n                break;\n            default:\n                window.parent.postMessage({ action: 'topy', data: { error: \"Wrong command.\" } });\n                break;\n        }\n    }\n\n    async function generate(data) {\n        const { url, api_key, model, prompt, context, stream_up } = data;\n        const requestBody = {\n            \"model\": model,\n            \"messages\": [{ \"role\": \"user\", \"content\": prompt }],\n            \"stream\": true\n        };\n        if (context) {\n            requestBody.messages.unshift({\"role\": \"system\", \"content\": context})\n        }\n        const response = await openAICompletion(url, api_key, requestBody);\n        const reader = response.getReader();\n\n        // Start reading from the stream\n        for (let index = 0; index < 1000000; index++) {\n            const { value, done } = await reader.read();\n\n            // Streaming will stop on `done` event or after 1m iterations (for loop)\n            if (done) break;\n\n            // `value` is a `Uint8Array`. Convert it to string.\n            const textChunk = new TextDecoder().decode(value);\n            // Retreave server send event rows\n            textChunk.split(\"data: \").forEach(line => {\n                const trimmed = line.trim();\n                // Get start of the object\n                if (trimmed.indexOf(\"{\") === 0) {\n                    const dataObj = JSON.parse(trimmed);\n                    const token = dataObj.choices[0].delta.content\n                    if (token !== undefined) {\n                        completion += token;\n                        outEl.innerHTML = converter.makeHtml(completion);\n                        window.scrollTo(0, document.body.scrollHeight);\n                        // Send back to the main form\n                        if (stream_up) {\n                            window.parent.postMessage({ action: 'topy', data: { data: completion } });\n                        }\n                    }\n                }\n            })\n        }\n    }\n\n    async function openAICompletion(url, api_key, data) {\n        const headers = { \"Content-Type\": \"application/json\" };\n        if (api_key) {\n            headers.Authorization = `Bearer  ${api_key}`;\n        }\n\n        return fetch(url, {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n        })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`POST ${url} responded with ${response.status} status code.`);\n                } else {\n                    return response.body;\n                }\n            })\n            .catch(error => {\n                throw error;\n            });\n    }\n</script>","height":300,"exclude":true,"invalid":false},{"type":"textarea","id":"answer","label":"Edit answer","placeholder":"","isRequired":false,"showError":false,"value":"","min":0,"max":512,"hidden":false,"exclude":false,"invalid":false}],"code":"from typing import List, Union\nfrom accessor import (\n    getValue,\n    repeatRow,\n    deleteRow,\n    setValue,\n    setLoading,\n    getGroupLength,\n    postMessageToWebComponent,\n    getPayload,\n)\nfrom environments import url\nfrom js import window\nimport json\n\ndef on_markdown_message(path: List[Union[str, int]], value):\n    setLoading(False)\n    setValue(['answer'], value['data'])\n    return\n\ndef on_answer_change(path: List[Union[str, int]], value):\n    request_data = {\n        'command': 'input',\n        'completion': value,\n    }\n    postMessageToWebComponent(['markdown'], json.dumps(request_data));\n    return\n\ndef on_generate_click(path: List[Union[str, int]]):\n    promt_text = getValue(['prompt'])\n    if(promt_text == '' or promt_text == None):\n        window.alert(\"Please enter a prompt.\")\n    else:\n        setLoading(True)\n        request_data = {\n            'command': 'generate',\n            'url': url,\n            'model': 'gpt-4',\n            'prompt': promt_text,\n            'stream_up': True\n        }\n        postMessageToWebComponent(['markdown'], json.dumps(request_data));\n    return\n","environments":[{"name":"url","value":"https://generative.superannotate.com/generate","secure":false}]}
